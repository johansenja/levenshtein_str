#!/usr/bin/env ruby
$: << File.dirname(__FILE__) + "/lib"

# Aiming to mimic how the Crystal looks fairly closely, with a wrapper method,
# and then a separate method for the logic

def _levenshtein_rb(first, second)
  len1, len2 = first.size, second.size
  return len1 if len2.zero?
  return len2 if len1.zero?

  matrix = [(0..len1).to_a]
  (1..len2).each do |j|
    matrix << [j] + [0] * len1
  end

  (1..len2).each do |i|
    (1..len1).each do |j|
      if first[j - 1] == second[i - 1]
        matrix[i][j] = matrix[i - 1][j - 1]
      else
        matrix[i][j] = [
          matrix[i - 1][j],
          matrix[i][j - 1],
          matrix[i - 1][j - 1],
        ].min + 1
      end
    end
  end
  return matrix.last.last
end

class String
  def levenshtein_rb(second)
    _levenshtein_rb(self, second)
  end
end

def setup
  load "Rakefile"

  Rake::Task["compile"].invoke

  require "benchmark/ips"
  require "benchmark/memory"
  require "levenshtein_str"
end

def bm_ips
  puts "\n\nBENCHMARKING IPS (iterations per second)\n\n\n"

  # blank strings
  Benchmark.ips do |bmark|
    bmark.report("Blank strings (Ruby)") { 100_000.times { "".levenshtein_rb("") } }
    bmark.report("Blank string (Crystal)") { 100_000.times { "".levenshtein("") } }
    bmark.compare!
  end

  # 1 char diff
  Benchmark.ips do |bmark|
    bmark.report("abd vs abc (Ruby)") { 100_000.times { "abd".levenshtein_rb("abc") } }
    bmark.report("abd vs abc (Crystal)") { 100_000.times { "abd".levenshtein("abc") } }
    bmark.compare!
  end

  # medium diff
  Benchmark.ips do |bmark|
    bmark.report("abcdefghi vs 0123456789 (Ruby)") { 100_000.times { "abcdefghi".levenshtein_rb("0123456789") } }
    bmark.report("abcdefghi vs 0123456789 (Crystal)") { 100_000.times { "abcdefghi".levenshtein("0123456789") } }
    bmark.compare!
  end

  # long diff
  Benchmark.ips do |bmark|
    bmark.report("[whole alphabet] vs 012345 (Ruby)") { 100_000.times { "abcdefghijklmnopqrstuvwxyz".levenshtein_rb("012345") } }
    bmark.report("[whole alphabet] vs 012345 (Crystal)") { 100_000.times { "abcdefghijklmnopqrstuvwxyz".levenshtein("012345") } }
    bmark.compare!
  end
end

def bm_memory
  puts "\n\nBENCHMARKING MEMORY USAGE\n\n\n"

  Benchmark.memory do |bmark|
    bmark.report("Blank strings (Ruby)") { 100_000.times { "".levenshtein_rb("") } }
    bmark.report("Blank string (Crystal)") { 100_000.times { "".levenshtein("") } }
    bmark.compare!
  end

  Benchmark.memory do |bmark|
    bmark.report("abd vs abc (Ruby)") { 100_000.times { "abd".levenshtein_rb("abc") } }
    bmark.report("abd vs abc (Crystal)") { 100_000.times { "abd".levenshtein("abc") } }
    bmark.compare!
  end

  Benchmark.memory do |bmark|
    bmark.report("abcdefghi vs 0123456789 (Ruby)") { 100_000.times { "abcdefghi".levenshtein_rb("0123456789") } }
    bmark.report("abcdefghi vs 0123456789 (Crystal)") { 100_000.times { "abcdefghi".levenshtein("0123456789") } }
    bmark.compare!
  end

  Benchmark.memory do |bmark|
    bmark.report("[whole alphabet] vs 012345 (Ruby)") { 100_000.times { "abcdefghijklmnopqrstuvwxyz".levenshtein_rb("012345") } }
    bmark.report("[whole alphabet] vs 012345 (Crystal)") { 100_000.times { "abcdefghijklmnopqrstuvwxyz".levenshtein("012345") } }
    bmark.compare!
  end
end

begin
  setup
  bm_ips
  bm_memory
ensure
  Rake::Task["clean"].invoke
end

# RESULTS

# BENCHMARKING IPS (iterations per second)

# Warming up --------------------------------------
# Blank strings (Ruby)     4.000  i/100ms
# Blank string (Crystal)
#                          5.000  i/100ms
# Calculating -------------------------------------
# Blank strings (Ruby)     55.396  (± 1.8%) i/s -    280.000  in   5.056752s
# Blank string (Crystal)
#                          51.092  (± 2.0%) i/s -    260.000  in   5.090523s

# Comparison:
# Blank strings (Ruby):       55.4 i/s
# Blank string (Crystal):       51.1 i/s - 1.08x  (± 0.00) slower

# Warming up --------------------------------------
#    abd vs abc (Ruby)     1.000  i/100ms
# abd vs abc (Crystal)     1.000  i/100ms
# Calculating -------------------------------------
#    abd vs abc (Ruby)      1.510  (± 0.0%) i/s -      8.000  in   5.298484s
# abd vs abc (Crystal)      2.951  (± 0.0%) i/s -     15.000  in   5.084644s

# Comparison:
# abd vs abc (Crystal):        3.0 i/s
#    abd vs abc (Ruby):        1.5 i/s - 1.95x  (± 0.00) slower

# Warming up --------------------------------------
# abcdefghi vs 0123456789 (Ruby)
#                          1.000  i/100ms
# abcdefghi vs 0123456789 (Crystal)
#                          1.000  i/100ms
# Calculating -------------------------------------
# abcdefghi vs 0123456789 (Ruby)
#                           0.218  (± 0.0%) i/s -      2.000  in   9.178957s
# abcdefghi vs 0123456789 (Crystal)
#                           0.475  (± 0.0%) i/s -      3.000  in   6.312027s

# Comparison:
# abcdefghi vs 0123456789 (Crystal):        0.5 i/s
# abcdefghi vs 0123456789 (Ruby):        0.2 i/s - 2.18x  (± 0.00) slower

# Warming up --------------------------------------
# [whole alphabet] vs 012345 (Ruby)
#                          1.000  i/100ms
# [whole alphabet] vs 012345 (Crystal)
#                          1.000  i/100ms
# Calculating -------------------------------------
# [whole alphabet] vs 012345 (Ruby)
#                           0.136  (± 0.0%) i/s -      1.000  in   7.358898s
# [whole alphabet] vs 012345 (Crystal)
#                           0.316  (± 0.0%) i/s -      2.000  in   6.324441s

# Comparison:
# [whole alphabet] vs 012345 (Crystal):        0.3 i/s
# [whole alphabet] vs 012345 (Ruby):        0.1 i/s - 2.33x  (± 0.00) slower

# BENCHMARKING MEMORY USAGE

# Calculating -------------------------------------
# Blank strings (Ruby)     8.000M memsize (     0.000  retained)
#                        200.000k objects (     0.000  retained)
#                          1.000  strings (     0.000  retained)
# Blank string (Crystal)
#                          8.000M memsize (     0.000  retained)
#                        200.000k objects (     0.000  retained)
#                          1.000  strings (     0.000  retained)

# Comparison:
# Blank strings (Ruby):    8000000 allocated
# Blank string (Crystal):    8000000 allocated - same
# Calculating -------------------------------------
#    abd vs abc (Ruby)   201.600M memsize (     0.000  retained)
#                          4.000M objects (     0.000  retained)
#                          6.000  strings (     0.000  retained)
# abd vs abc (Crystal)     8.000M memsize (     0.000  retained)
#                        200.000k objects (     0.000  retained)
#                          2.000  strings (     0.000  retained)

# Comparison:
# abd vs abc (Crystal):    8000000 allocated
#    abd vs abc (Ruby):  201600000 allocated - 25.20x more
# Calculating -------------------------------------
# abcdefghi vs 0123456789 (Ruby)
#                          1.132B memsize (     0.000  retained)
#                         23.700M objects (     0.000  retained)
#                         21.000  strings (     0.000  retained)
# abcdefghi vs 0123456789 (Crystal)
#                          8.000M memsize (     0.000  retained)
#                        200.000k objects (     0.000  retained)
#                          2.000  strings (     0.000  retained)

# Comparison:
# abcdefghi vs 0123456789 (Crystal):    8000000 allocated
# abcdefghi vs 0123456789 (Ruby): 1132000000 allocated - 141.50x more
# Calculating -------------------------------------
# [whole alphabet] vs 012345 (Ruby)
#                          1.696B memsize (     0.000  retained)
#                         34.900M objects (     0.000  retained)
#                         34.000  strings (     0.000  retained)
# [whole alphabet] vs 012345 (Crystal)
#                          8.000M memsize (     0.000  retained)
#                        200.000k objects (     0.000  retained)
#                          2.000  strings (     0.000  retained)

# Comparison:
# [whole alphabet] vs 012345 (Crystal):    8000000 allocated
# [whole alphabet] vs 012345 (Ruby): 1696000000 allocated - 212.00x more
